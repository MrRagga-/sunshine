# generated by datamodel-codegen:
#   filename:  battery.yaml
#   timestamp: 2023-11-14T22:08:10+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel, Field


class Info(BaseModel):
    version: str
    description: str
    title: str


class Field201(BaseModel):
    description: str


class Field401(BaseModel):
    description: str


class Field403(BaseModel):
    description: str


class Responses(BaseModel):
    field_201: Field201 = Field(..., alias='201')
    field_401: Field401 = Field(..., alias='401')
    field_403: Field403 = Field(..., alias='403')


class Parameter(BaseModel):
    description: str
    format: str
    required: bool
    maximum: int
    minimum: int
    in_: str = Field(..., alias='in')
    type: str
    name: str


class Post(BaseModel):
    responses: Responses
    parameters: List[Parameter]
    produces: List[str]
    description: str
    tags: List[str]
    summary: str
    consumes: List[str]
    operationId: str


class FieldApiV2SetpointDischargeWatt(BaseModel):
    post: Post


class Field200(BaseModel):
    description: str


class Responses1(BaseModel):
    field_200: Field200 = Field(..., alias='200')
    field_401: Field401 = Field(..., alias='401')
    field_403: Field403 = Field(..., alias='403')


class Parameter1(BaseModel):
    required: bool
    type: str
    description: str
    in_: str = Field(..., alias='in')
    name: str


class Get(BaseModel):
    responses: Responses1
    parameters: List[Parameter1]
    produces: List[str]
    operationId: str
    description: str
    tags: List[str]
    summary: str


class FieldApiV2ConfigurationsName(BaseModel):
    get: Get


class Field500(BaseModel):
    description: str


class Responses2(BaseModel):
    field_200: Field200 = Field(..., alias='200')
    field_401: Field401 = Field(..., alias='401')
    field_500: Field500 = Field(..., alias='500')


class Get1(BaseModel):
    responses: Responses2
    produces: List[str]
    operationId: str
    tags: List[str]
    summary: str
    description: str


class FieldApiV2Io(BaseModel):
    get: Get1


class Responses3(BaseModel):
    field_200: Field200 = Field(..., alias='200')
    field_401: Field401 = Field(..., alias='401')
    field_500: Field500 = Field(..., alias='500')


class Get2(BaseModel):
    responses: Responses3
    produces: List[str]
    operationId: str
    tags: List[str]
    summary: str
    description: str


class FieldApiV2Battery(BaseModel):
    get: Get2


class Responses4(BaseModel):
    field_200: Field200 = Field(..., alias='200')


class Get3(BaseModel):
    responses: Responses4
    produces: List[str]
    operationId: str
    tags: List[str]
    summary: str
    description: str


class FieldApiV2Status(BaseModel):
    get: Get3


class Responses5(BaseModel):
    field_200: Field200 = Field(..., alias='200')
    field_401: Field401 = Field(..., alias='401')
    field_403: Field403 = Field(..., alias='403')


class Put(BaseModel):
    responses: Responses5
    produces: List[str]
    operationId: str
    description: str
    tags: List[str]
    consumes: List[str]
    summary: str


class Responses6(BaseModel):
    field_200: Field200 = Field(..., alias='200')
    field_401: Field401 = Field(..., alias='401')
    field_500: Field500 = Field(..., alias='500')


class Get4(BaseModel):
    responses: Responses6
    produces: List[str]
    operationId: str
    tags: List[str]
    summary: str
    description: str


class FieldApiV2Configurations(BaseModel):
    put: Put
    get: Get4


class Responses7(BaseModel):
    field_200: Field200 = Field(..., alias='200')
    field_401: Field401 = Field(..., alias='401')
    field_500: Field500 = Field(..., alias='500')


class Get5(BaseModel):
    responses: Responses7
    produces: List[str]
    operationId: str
    tags: List[str]
    summary: str
    description: str


class FieldApiV2Inverter(BaseModel):
    get: Get5


class Responses8(BaseModel):
    field_200: Field200 = Field(..., alias='200')
    field_401: Field401 = Field(..., alias='401')


class Get6(BaseModel):
    responses: Responses8
    produces: List[str]
    operationId: str
    tags: List[str]
    summary: str
    description: str


class FieldApiV2Latestdata(BaseModel):
    get: Get6


class Responses9(BaseModel):
    field_201: Field201 = Field(..., alias='201')
    field_401: Field401 = Field(..., alias='401')
    field_403: Field403 = Field(..., alias='403')


class Parameter2(BaseModel):
    description: str
    format: str
    required: bool
    maximum: int
    minimum: int
    in_: str = Field(..., alias='in')
    type: str
    name: str


class Post1(BaseModel):
    responses: Responses9
    parameters: List[Parameter2]
    produces: List[str]
    description: str
    tags: List[str]
    summary: str
    consumes: List[str]
    operationId: str


class FieldApiV2SetpointChargeWatt(BaseModel):
    post: Post1


class Responses10(BaseModel):
    field_200: Field200 = Field(..., alias='200')
    field_401: Field401 = Field(..., alias='401')


class Get7(BaseModel):
    responses: Responses10
    produces: List[str]
    operationId: str
    tags: List[str]
    summary: str
    description: str


class FieldApiV2Powermeter(BaseModel):
    get: Get7


class Paths(BaseModel):
    field_api_v2_setpoint_discharge__watt_: FieldApiV2SetpointDischargeWatt = Field(
        ..., alias='/api/v2/setpoint/discharge/{watt}'
    )
    field_api_v2_configurations__name_: FieldApiV2ConfigurationsName = Field(
        ..., alias='/api/v2/configurations/{name}'
    )
    field_api_v2_io: FieldApiV2Io = Field(..., alias='/api/v2/io')
    field_api_v2_battery: FieldApiV2Battery = Field(..., alias='/api/v2/battery')
    field_api_v2_status: FieldApiV2Status = Field(..., alias='/api/v2/status')
    field_api_v2_configurations: FieldApiV2Configurations = Field(
        ..., alias='/api/v2/configurations'
    )
    field_api_v2_inverter: FieldApiV2Inverter = Field(..., alias='/api/v2/inverter')
    field_api_v2_latestdata: FieldApiV2Latestdata = Field(
        ..., alias='/api/v2/latestdata'
    )
    field_api_v2_setpoint_charge__watt_: FieldApiV2SetpointChargeWatt = Field(
        ..., alias='/api/v2/setpoint/charge/{watt}'
    )
    field_api_v2_powermeter: FieldApiV2Powermeter = Field(
        ..., alias='/api/v2/powermeter'
    )


class Model(BaseModel):
    info: Info
    paths: Paths
    host: str
    swagger: str
    produces: List[str]
